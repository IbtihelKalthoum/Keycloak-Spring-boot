
server.port = 9000

spring.security.oauth2.client.registration.oauth2-client-credentials.client-id=auth-client
spring.security.oauth2.client.registration.oauth2-client-credentials.client-secret=BKXkrE6QsqAmv8hfeQYAK4M6QJEiHa7M
spring.security.oauth2.client.registration.oauth2-client-credentials.scope=openid, profile, roles
spring.security.oauth2.client.registration.oauth2-client-credentials.authorization-grant-type=password
#spring.security.oauth2.client.registration.oauth2-client-credentials.redirect-uri=http://localhost:8080/login/oauth2/code/oauth2-client-credentials
spring.security.oauth2.client.registration.oauth2-client-credentials.provider=keycloak

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/auth-realm
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8080/realms/auth-realm/protocol/openid-connect/token

keycloak.realm=auth-realm
keycloak.resource=auth-client
keycloak.auth-server-url=http://localhost:8080
keycloak.ssl-required=external
keycloak.public-client=true

##connect to database
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/authentication
spring.datasource.username=postgres
spring.datasource.password=admin


##JPA Config
spring.jpa.properties..hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
